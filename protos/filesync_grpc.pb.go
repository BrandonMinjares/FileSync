// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: protos/filesync.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileSyncService_SendFile_FullMethodName           = "/filesyncpb.FileSyncService/SendFile"
	FileSyncService_ReceiveFile_FullMethodName        = "/filesyncpb.FileSyncService/ReceiveFile"
	FileSyncService_RequestConnection_FullMethodName  = "/filesyncpb.FileSyncService/RequestConnection"
	FileSyncService_ReceiveFolder_FullMethodName      = "/filesyncpb.FileSyncService/ReceiveFolder"
	FileSyncService_RequestUpdate_FullMethodName      = "/filesyncpb.FileSyncService/RequestUpdate"
	FileSyncService_ReceiveUpdatedFile_FullMethodName = "/filesyncpb.FileSyncService/ReceiveUpdatedFile"
)

// FileSyncServiceClient is the client API for FileSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileSyncServiceClient interface {
	SendFile(ctx context.Context, in *FileChunk, opts ...grpc.CallOption) (*Ack, error)
	ReceiveFile(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error)
	RequestConnection(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionResponse, error)
	ReceiveFolder(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FolderChunk, Ack], error)
	RequestUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	ReceiveUpdatedFile(ctx context.Context, in *FileUpdate, opts ...grpc.CallOption) (*Ack, error)
}

type fileSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSyncServiceClient(cc grpc.ClientConnInterface) FileSyncServiceClient {
	return &fileSyncServiceClient{cc}
}

func (c *fileSyncServiceClient) SendFile(ctx context.Context, in *FileChunk, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, FileSyncService_SendFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSyncServiceClient) ReceiveFile(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileSyncService_ServiceDesc.Streams[0], FileSyncService_ReceiveFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, FileChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSyncService_ReceiveFileClient = grpc.ServerStreamingClient[FileChunk]

func (c *fileSyncServiceClient) RequestConnection(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectionResponse)
	err := c.cc.Invoke(ctx, FileSyncService_RequestConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSyncServiceClient) ReceiveFolder(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FolderChunk, Ack], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileSyncService_ServiceDesc.Streams[1], FileSyncService_ReceiveFolder_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FolderChunk, Ack]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSyncService_ReceiveFolderClient = grpc.ClientStreamingClient[FolderChunk, Ack]

func (c *fileSyncServiceClient) RequestUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, FileSyncService_RequestUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSyncServiceClient) ReceiveUpdatedFile(ctx context.Context, in *FileUpdate, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, FileSyncService_ReceiveUpdatedFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileSyncServiceServer is the server API for FileSyncService service.
// All implementations must embed UnimplementedFileSyncServiceServer
// for forward compatibility.
type FileSyncServiceServer interface {
	SendFile(context.Context, *FileChunk) (*Ack, error)
	ReceiveFile(*Empty, grpc.ServerStreamingServer[FileChunk]) error
	RequestConnection(context.Context, *ConnectionRequest) (*ConnectionResponse, error)
	ReceiveFolder(grpc.ClientStreamingServer[FolderChunk, Ack]) error
	RequestUpdate(context.Context, *UpdateRequest) (*UpdateResponse, error)
	ReceiveUpdatedFile(context.Context, *FileUpdate) (*Ack, error)
	mustEmbedUnimplementedFileSyncServiceServer()
}

// UnimplementedFileSyncServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileSyncServiceServer struct{}

func (UnimplementedFileSyncServiceServer) SendFile(context.Context, *FileChunk) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (UnimplementedFileSyncServiceServer) ReceiveFile(*Empty, grpc.ServerStreamingServer[FileChunk]) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveFile not implemented")
}
func (UnimplementedFileSyncServiceServer) RequestConnection(context.Context, *ConnectionRequest) (*ConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestConnection not implemented")
}
func (UnimplementedFileSyncServiceServer) ReceiveFolder(grpc.ClientStreamingServer[FolderChunk, Ack]) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveFolder not implemented")
}
func (UnimplementedFileSyncServiceServer) RequestUpdate(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestUpdate not implemented")
}
func (UnimplementedFileSyncServiceServer) ReceiveUpdatedFile(context.Context, *FileUpdate) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveUpdatedFile not implemented")
}
func (UnimplementedFileSyncServiceServer) mustEmbedUnimplementedFileSyncServiceServer() {}
func (UnimplementedFileSyncServiceServer) testEmbeddedByValue()                         {}

// UnsafeFileSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSyncServiceServer will
// result in compilation errors.
type UnsafeFileSyncServiceServer interface {
	mustEmbedUnimplementedFileSyncServiceServer()
}

func RegisterFileSyncServiceServer(s grpc.ServiceRegistrar, srv FileSyncServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileSyncServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileSyncService_ServiceDesc, srv)
}

func _FileSyncService_SendFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileChunk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSyncServiceServer).SendFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSyncService_SendFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSyncServiceServer).SendFile(ctx, req.(*FileChunk))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSyncService_ReceiveFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileSyncServiceServer).ReceiveFile(m, &grpc.GenericServerStream[Empty, FileChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSyncService_ReceiveFileServer = grpc.ServerStreamingServer[FileChunk]

func _FileSyncService_RequestConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSyncServiceServer).RequestConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSyncService_RequestConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSyncServiceServer).RequestConnection(ctx, req.(*ConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSyncService_ReceiveFolder_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSyncServiceServer).ReceiveFolder(&grpc.GenericServerStream[FolderChunk, Ack]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSyncService_ReceiveFolderServer = grpc.ClientStreamingServer[FolderChunk, Ack]

func _FileSyncService_RequestUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSyncServiceServer).RequestUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSyncService_RequestUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSyncServiceServer).RequestUpdate(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSyncService_ReceiveUpdatedFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSyncServiceServer).ReceiveUpdatedFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSyncService_ReceiveUpdatedFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSyncServiceServer).ReceiveUpdatedFile(ctx, req.(*FileUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

// FileSyncService_ServiceDesc is the grpc.ServiceDesc for FileSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filesyncpb.FileSyncService",
	HandlerType: (*FileSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendFile",
			Handler:    _FileSyncService_SendFile_Handler,
		},
		{
			MethodName: "RequestConnection",
			Handler:    _FileSyncService_RequestConnection_Handler,
		},
		{
			MethodName: "RequestUpdate",
			Handler:    _FileSyncService_RequestUpdate_Handler,
		},
		{
			MethodName: "ReceiveUpdatedFile",
			Handler:    _FileSyncService_ReceiveUpdatedFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveFile",
			Handler:       _FileSyncService_ReceiveFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReceiveFolder",
			Handler:       _FileSyncService_ReceiveFolder_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protos/filesync.proto",
}

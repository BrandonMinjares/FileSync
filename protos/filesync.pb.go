// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: protos/filesync.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	ChunkNumber   int32                  `protobuf:"varint,3,opt,name=chunk_number,json=chunkNumber,proto3" json:"chunk_number,omitempty"`
	IsLast        bool                   `protobuf:"varint,4,opt,name=is_last,json=isLast,proto3" json:"is_last,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileChunk) Reset() {
	*x = FileChunk{}
	mi := &file_protos_filesync_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileChunk) ProtoMessage() {}

func (x *FileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_protos_filesync_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileChunk.ProtoReflect.Descriptor instead.
func (*FileChunk) Descriptor() ([]byte, []int) {
	return file_protos_filesync_proto_rawDescGZIP(), []int{0}
}

func (x *FileChunk) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FileChunk) GetChunkNumber() int32 {
	if x != nil {
		return x.ChunkNumber
	}
	return 0
}

func (x *FileChunk) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

type Ack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Received      bool                   `protobuf:"varint,1,opt,name=received,proto3" json:"received,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_protos_filesync_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_protos_filesync_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_protos_filesync_proto_rawDescGZIP(), []int{1}
}

func (x *Ack) GetReceived() bool {
	if x != nil {
		return x.Received
	}
	return false
}

func (x *Ack) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_protos_filesync_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_protos_filesync_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_protos_filesync_proto_rawDescGZIP(), []int{2}
}

var File_protos_filesync_proto protoreflect.FileDescriptor

const file_protos_filesync_proto_rawDesc = "" +
	"\n" +
	"\x15protos/filesync.proto\x12\n" +
	"filesyncpb\"w\n" +
	"\tFileChunk\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x12!\n" +
	"\fchunk_number\x18\x03 \x01(\x05R\vchunkNumber\x12\x17\n" +
	"\ais_last\x18\x04 \x01(\bR\x06isLast\";\n" +
	"\x03Ack\x12\x1a\n" +
	"\breceived\x18\x01 \x01(\bR\breceived\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\a\n" +
	"\x05Empty2\x80\x01\n" +
	"\x0fFileSyncService\x122\n" +
	"\bSendFile\x12\x15.filesyncpb.FileChunk\x1a\x0f.filesyncpb.Ack\x129\n" +
	"\vReceiveFile\x12\x11.filesyncpb.Empty\x1a\x15.filesyncpb.FileChunk0\x01B\x13Z\x11synthesize/protosb\x06proto3"

var (
	file_protos_filesync_proto_rawDescOnce sync.Once
	file_protos_filesync_proto_rawDescData []byte
)

func file_protos_filesync_proto_rawDescGZIP() []byte {
	file_protos_filesync_proto_rawDescOnce.Do(func() {
		file_protos_filesync_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_protos_filesync_proto_rawDesc), len(file_protos_filesync_proto_rawDesc)))
	})
	return file_protos_filesync_proto_rawDescData
}

var file_protos_filesync_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_protos_filesync_proto_goTypes = []any{
	(*FileChunk)(nil), // 0: filesyncpb.FileChunk
	(*Ack)(nil),       // 1: filesyncpb.Ack
	(*Empty)(nil),     // 2: filesyncpb.Empty
}
var file_protos_filesync_proto_depIdxs = []int32{
	0, // 0: filesyncpb.FileSyncService.SendFile:input_type -> filesyncpb.FileChunk
	2, // 1: filesyncpb.FileSyncService.ReceiveFile:input_type -> filesyncpb.Empty
	1, // 2: filesyncpb.FileSyncService.SendFile:output_type -> filesyncpb.Ack
	0, // 3: filesyncpb.FileSyncService.ReceiveFile:output_type -> filesyncpb.FileChunk
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_protos_filesync_proto_init() }
func file_protos_filesync_proto_init() {
	if File_protos_filesync_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_protos_filesync_proto_rawDesc), len(file_protos_filesync_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_filesync_proto_goTypes,
		DependencyIndexes: file_protos_filesync_proto_depIdxs,
		MessageInfos:      file_protos_filesync_proto_msgTypes,
	}.Build()
	File_protos_filesync_proto = out.File
	file_protos_filesync_proto_goTypes = nil
	file_protos_filesync_proto_depIdxs = nil
}
